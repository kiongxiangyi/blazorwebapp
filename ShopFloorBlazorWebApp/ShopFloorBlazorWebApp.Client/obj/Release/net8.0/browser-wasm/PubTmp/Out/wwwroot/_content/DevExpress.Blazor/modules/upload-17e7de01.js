import{i as t,U as e,F as s,a as o,M as i,C as a,W as l}from"./upload-base-644ec5b0.js";import"./_tslib-6e8ca86b.js";import"./dom-da46d023.js";import"./browser-d96520d8.js";import"./common-f853e871.js";import"./custom-events-helper-e7f279d3.js";import"./single-slot-element-base-3afabaf0.js";import"./data-qa-utils-8be7c726.js";import"./const-90026e45.js";import"./dx-ui-element-dd33ec67.js";import"./lit-element-base-29f49d31.js";import"./dx-license-1f911fcd.js";import"./lit-element-462e7ad3.js";import"./logicaltreehelper-7b19cc30.js";import"./layouthelper-0c7c89da.js";import"./point-e4ec110e.js";import"./constants-791d6f9b.js";import"./property-4ec0b52d.js";import"./css-classes-cee8476c.js";class d extends e{constructor(){super(),this.uploaders=new Map,this.uploadPromises=new Set,this.pendingFiles=new Array}processUploadedFilesOptionsCore(t){for(const e of t)e.status===s.PendingUpload&&e.uploadStartOptions&&this.onUploadStartCallback(e.uploadStartOptions,e.customFormDataOptions)}onUploadStartCallback(t,e){const{guid:s,requestJSOptions:i}=t,a=this.files.get(s);a&&(this.attachEventsToFileItem(a),i?this.uploadTechnology!==o.Http||i.uploadUrl?this.startUpload(a,i,(null==e?void 0:e.customData)||{}):a.error(new EventTarget):a.abort())}startUpload(t,e,o){t.status=s.PendingUpload,this.scheduleUpload(t,e,o)}scheduleUpload(t,e,s){if(this.uploadPromises.size<i){const o=this.uploadFileCore(t,e,s);this.uploadPromises.add(o),o.catch((e=>{var s;e&&e.status&&e.statusText&&e.responseText&&(null===(s=t.onError)||void 0===s||s.call(t,e))})).finally((()=>{this.onAfterUpload(o)}))}else this.pendingFiles.push({file:t,requestOptions:e,customData:s})}onAfterUpload(t){if(this.uploadPromises.delete(t),this.pendingFiles.length>0){const e=this.pendingFiles.shift(),s=this.uploadFileCore(e.file,e.requestOptions,e.customData);this.uploadPromises.add(t),s.finally((()=>{this.onAfterUpload(s)}))}}getUploadStrategy(t){const e=this.chunkSize>0?new a(this):new l(this),o=this.uploaders.get(t.fileInfo.guid);return(o!==e&&t.status!==s.Uploading||!o)&&this.uploaders.set(t.fileInfo.guid,e),this.uploaders.get(t.fileInfo.guid)}uploadFileCore(t,e,o){return this.getUploadStrategy(t).upload(t,e,o,(t=>(t.loadEnd(),t.isUploadComplete()||t.status!==s.Uploading?Promise.resolve():this.uploadFileCore(t,e,null))))}onCustomizeFormDataCallback(t){var e;const s=t.fileGuid;null===(e=this.uploaders.get(s))||void 0===e||e.onCustomizeChunkMetadataResponse(t.customData),this.uploaders.delete(s)}}customElements.define("dxbl-upload",d);const r={loadModule:function(){},initDotNetReference:t};export{d as DxUpload,r as default};
