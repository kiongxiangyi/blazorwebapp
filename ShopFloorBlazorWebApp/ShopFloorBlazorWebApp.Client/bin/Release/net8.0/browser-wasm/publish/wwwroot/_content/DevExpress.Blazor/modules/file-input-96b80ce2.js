import{i as e,U as t,F as s,t as o}from"./upload-base-644ec5b0.js";import"./_tslib-6e8ca86b.js";import"./dom-da46d023.js";import"./browser-d96520d8.js";import"./common-f853e871.js";import"./custom-events-helper-e7f279d3.js";import"./single-slot-element-base-3afabaf0.js";import"./data-qa-utils-8be7c726.js";import"./const-90026e45.js";import"./dx-ui-element-dd33ec67.js";import"./lit-element-base-29f49d31.js";import"./dx-license-1f911fcd.js";import"./lit-element-462e7ad3.js";import"./logicaltreehelper-7b19cc30.js";import"./layouthelper-0c7c89da.js";import"./point-e4ec110e.js";import"./constants-791d6f9b.js";import"./property-4ec0b52d.js";import"./css-classes-cee8476c.js";class i extends t{processUploadedFilesOptionsCore(e){const t=e.filter((e=>e.status===s.PendingUpload&&e.uploadStartOptions));for(const e of t){const t=this.files.get(e.fileGuid);t&&(this.attachEventsToFileItem(t),t.loadStart())}const o=t.map((e=>e.fileGuid));o.length&&this.dotnetHelper.invokeMethodAsync("UploadFileViaJsInterop",o)}}customElements.define("dxbl-file-input",i);const l={loadModule:function(){},initDotNetReference:e,getFileBytes:function(e,t){var s,i;return null===(i=null===(s=o(e))||void 0===s?void 0:s.getFileBytes)||void 0===i?void 0:i.call(s,t)},updateFileStatus:function(e,t,s,i){var l;null===(l=o(e))||void 0===l||l.updateFileStatus(t,s,i)}};export{i as DxFileInput,l as default};
